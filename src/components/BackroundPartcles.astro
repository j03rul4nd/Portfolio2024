---
---

<div class="block  p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700" id="sectionCanvasGLSLcntr">
    <h3 class="mb-4 text-3xl font-extrabold text-white md:text-5xl lg:text-6xl"><span class="text-transparent bg-clip-text bg-gradient-to-r to-white from-sky-400">WebGL Upgrade</span> Enhance and Modernize Your Web Designs</h3>
    
    <div id="canvasGLSL">
    </div>
</div>

<style is:global>
    #canvasGLSL{
        width: 100%;
         height: 304.859px;
         border: 2px solid white;
         position: relative; /* Add this line to make it a positioning context */
    }

    #stats {
        position: absolute !important;
        top: 0;
        left: 0;
        display: none;
    }

    #gui {
        position: absolute;
        top: 0;
        right: 0;
        width: fit-content;
        height: -webkit-fill-available;
        max-height: 100%;
        background: red;
    }
    .lil-gui.allow-touch-styles.root.autoPlace {
        z-index: 0;
        top: auto;
        position: absolute;
    }
    #sectionCanvasGLSLcntr {
        margin-top: 2rem;
        background-size: cover;
        background-image: url(/images/gradientblack.jpg);
    }

</style>



 
 <script >
    import * as THREE from 'three';
     import { OrbitControls } from './threeComponents/OrbitControls.js';
    import Stats from './threeComponents/stats.module.js';
    import { GUI } from './threeComponents/lil-gui.module.min.js';


    function initerled (){
        var group;
        var containerbACK, statsbACK;
        const particlesData = [];
        var cameraBACK, sceneBACK, rendererBACK;
        var positions, colors;
        var particles;
        var pointCloud;
        var particlePositions;
        var linesMesh;
        var gui;

        const maxParticleCount = 1000;
        var particleCount = 500;
        const r = 800;
        const rHalf = r / 2;

        const effectController = {
            showDots: true,
            showLines: true,
            minDistance: 150,
            limitConnections: false,
            maxConnections: 20,
            particleCount: 500
        };

        initBack();
        animate();

        function initGUI(guiContainer) {
            //const gui = new dat.GUI();
             gui = new GUI();

            gui.add(effectController, 'showDots').onChange(function (value) {
                pointCloud.visible = value;
            });
            gui.add(effectController, 'showLines').onChange(function (value) {
                linesMesh.visible = value;
            });
            gui.add(effectController, 'minDistance', 10, 300);
            gui.add(effectController, 'limitConnections');
            gui.add(effectController, 'maxConnections', 0, 30, 1);
            gui.add(effectController, 'particleCount', 0, maxParticleCount, 1).onChange(function (value) {
                particleCount = value;
                particles.setDrawRange(0, particleCount);
            });

            // Create a wrapper div for the GUI
            const guiWrapper = document.createElement('div');
            guiContainer.appendChild(guiWrapper);

            // Append GUI to the wrapper div
            guiWrapper.appendChild(gui.domElement );
            // guiContainer.appendChild(gui.dom)

        }

        function initBack() {
            
            containerbACK = document.getElementById('canvasGLSL');
            
            

            cameraBACK = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 4000);
            cameraBACK.position.z = 1750;

            sceneBACK = new THREE.Scene();

            group = new THREE.Group();
            sceneBACK.add(group);

            const helper = new THREE.BoxHelper(new THREE.Mesh(new THREE.BoxGeometry(r, r, r)));
            helper.material.color.setHex(0x474747);
            helper.material.blending = THREE.AdditiveBlending;
            helper.material.transparent = true;
            group.add(helper);

            const segments = maxParticleCount * maxParticleCount;

            positions = new Float32Array(segments * 3);
            colors = new Float32Array(segments * 3);

            const pMaterial = new THREE.PointsMaterial({
                color: 0xFFFFFF,
                size: 3,
                blending: THREE.AdditiveBlending,
                transparent: true,
                sizeAttenuation: false
            });

            particles = new THREE.BufferGeometry();
            particlePositions = new Float32Array(maxParticleCount * 3);

            for (let i = 0; i < maxParticleCount; i++) {
                const x = Math.random() * r - r / 2;
                const y = Math.random() * r - r / 2;
                const z = Math.random() * r - r / 2;

                particlePositions[i * 3] = x;
                particlePositions[i * 3 + 1] = y;
                particlePositions[i * 3 + 2] = z;

                particlesData.push({
                    velocity: new THREE.Vector3(-1 + Math.random() * 2, -1 + Math.random() * 2, -1 + Math.random() * 2),
                    numConnections: 0
                });
            }

            particles.setDrawRange(0, particleCount);
            particles.setAttribute('position', new THREE.BufferAttribute(particlePositions, 3).setUsage(THREE.DynamicDrawUsage));

            pointCloud = new THREE.Points(particles, pMaterial);
            group.add(pointCloud);

            const geometry = new THREE.BufferGeometry();

            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3).setUsage(THREE.DynamicDrawUsage));
            geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3).setUsage(THREE.DynamicDrawUsage));

            geometry.computeBoundingSphere();
            geometry.setDrawRange(0, 0);

            const material = new THREE.LineBasicMaterial({
                vertexColors: true,
                blending: THREE.AdditiveBlending,
                transparent: true
            });

            linesMesh = new THREE.LineSegments(geometry, material);
            group.add(linesMesh);

            rendererBACK = new THREE.WebGLRenderer({ antialias: true });
            rendererBACK.setPixelRatio(window.devicePixelRatio);
            //rendererBACK.setSize(window.innerWidth, window.innerHeight);
            rendererBACK.setSize(containerbACK.clientWidth, containerbACK.clientHeight);


            containerbACK.appendChild(rendererBACK.domElement);

            statsbACK = new Stats();
            containerbACK.appendChild(statsbACK.dom);
            statsbACK.dom.id = 'stats'; // Set an id for easier styling
            
            const guiContainer = document.createElement('div');
            containerbACK.appendChild(guiContainer);
            guiContainer.id = 'gui'; // Set an id for easier styling
            
            initGUI(guiContainer);
            // Append GUI to the new container
          //  guiContainer.appendChild(gui.dom);

            window.addEventListener('resize', onWindowResize);
            onWindowResize();
        }

        function onWindowResize() {
            const newWidth = containerbACK.clientWidth;
            const newHeight = containerbACK.clientHeight;

            cameraBACK.aspect = newWidth / newHeight;
            cameraBACK.updateProjectionMatrix();
            
            rendererBACK.setSize(newWidth, newHeight);
        }

        function animate() {
            let vertexpos = 0;
            let colorpos = 0;
            let numConnected = 0;

            for (let i = 0; i < particleCount; i++)
                particlesData[i].numConnections = 0;

            for (let i = 0; i < particleCount; i++) {
                const particleData = particlesData[i];

                particlePositions[i * 3] += particleData.velocity.x;
                particlePositions[i * 3 + 1] += particleData.velocity.y;
                particlePositions[i * 3 + 2] += particleData.velocity.z;

                if (particlePositions[i * 3 + 1] < -rHalf || particlePositions[i * 3 + 1] > rHalf)
                    particleData.velocity.y = -particleData.velocity.y;

                if (particlePositions[i * 3] < -rHalf || particlePositions[i * 3] > rHalf)
                    particleData.velocity.x = -particleData.velocity.x;

                if (particlePositions[i * 3 + 2] < -rHalf || particlePositions[i * 3 + 2] > rHalf)
                    particleData.velocity.z = -particleData.velocity.z;

                if (effectController.limitConnections && particleData.numConnections >= effectController.maxConnections)
                    continue;

                for (let j = i + 1; j < particleCount; j++) {
                    const particleDataB = particlesData[j];
                    if (effectController.limitConnections && particleDataB.numConnections >= effectController.maxConnections)
                        continue;

                    const dx = particlePositions[i * 3] - particlePositions[j * 3];
                    const dy = particlePositions[i * 3 + 1] - particlePositions[j * 3 + 1];
                    const dz = particlePositions[i * 3 + 2] - particlePositions[j * 3 + 2];
                    const dist = Math.sqrt(dx * dx + dy * dy + dz * dz);

                    if (dist < effectController.minDistance) {
                        particleData.numConnections++;
                        particleDataB.numConnections++;

                        const alpha = 1.0 - dist / effectController.minDistance;

                        positions[vertexpos++] = particlePositions[i * 3];
                        positions[vertexpos++] = particlePositions[i * 3 + 1];
                        positions[vertexpos++] = particlePositions[i * 3 + 2];

                        positions[vertexpos++] = particlePositions[j * 3];
                        positions[vertexpos++] = particlePositions[j * 3 + 1];
                        positions[vertexpos++] = particlePositions[j * 3 + 2];

                        colors[colorpos++] = alpha;
                        colors[colorpos++] = alpha;
                        colors[colorpos++] = alpha;

                        colors[colorpos++] = alpha;
                        colors[colorpos++] = alpha;
                        colors[colorpos++] = alpha;

                        numConnected++;
                    }
                }
            }

            linesMesh.geometry.setDrawRange(0, numConnected * 2);
            linesMesh.geometry.attributes.position.needsUpdate = true;
            linesMesh.geometry.attributes.color.needsUpdate = true;

            pointCloud.geometry.attributes.position.needsUpdate = true;

            requestAnimationFrame(animate);

            statsbACK.update();
            render();
        }

        function render() {
            const time = Date.now() * 0.001;
            group.rotation.y = time * 0.1;
            rendererBACK.render(sceneBACK, cameraBACK);
        }
       
    }

    window.addEventListener("load", initerled);

</script>


